{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-gray",
    "glyph" : "file-code"
  },
  "name" : "weather-cal",
  "script" : "\/*\n * SETUP\n * Use this section to set up the widget.\n * ======================================\n *\/\n\n\/\/ To use weather, get a free API key at openweathermap.org\/appid and paste it in between the quotation marks.\nconst apiKey = \"32eb932e0efcb95dc46ad66fb8718083\"\n\n\/\/ Set the locale code. Leave blank \"\" to match the device's locale. You can change the hard-coded text strings in the TEXT section below.\nlet locale = \"\"\n\n\/\/ Set to true for fixed location, false to update location as you move around\nconst lockLocation = true\n\n\/\/ The size of the widget preview in the app.\nconst widgetPreview = \"large\"\n\n\/\/ Set to true for an image background, false for no image.\nconst imageBackground = false\n\n\/\/ Set to true to reset the widget's background image.\nconst forceImageUpdate = false\n\n\/\/ Set the padding around each item. Default is 10.\nconst padding = 10\n\n\/*\n * LAYOUT\n * Decide what items to show on the widget.\n * ========================================\n *\/\n\n\/\/ Set the width of the column, or set to 0 for an automatic width.\n\n\/\/ You can add items to the column: \n\/\/ date, greeting, events, current, future, text(\"Your text here\")\n\/\/ You can also add a left, center, or right to the list. Everything after it will be aligned that way.\n\n\/\/ Make sure to always put a comma after each item.\n\nconst columns = [{\n  \n  \/\/ Settings for the left column.\n  width: 0,\n  items: [\n    \n    left,\n    greeting,\n    date,\n    events,\n    \n]}, {\n\n  \/\/ Settings for the right column.\n  width: 100,\n  items: [\n    \n    left,\n    current,\n    space,\n    future,\n  \n]}]\n\n\/*\n * ITEM SETTINGS\n * Choose how each item is displayed.\n * ==================================\n *\/  \n \n\/\/ DATE\n\/\/ ====\nconst dateSettings = {\n\n  \/\/ If set to true, date will become smaller when events are displayed.\n  dynamicDateSize: true\n\n  \/\/ If the date is not dynamic, should it be large or small?\n  ,staticDateSize: \"small\"\n\n  \/\/ Determine the date format for each date type. See docs.scriptable.app\/dateformatter\n  ,smallDateFormat: \"EEEE, MMMM d\"\n  ,largeDateLineOne: \"EEEE,\"\n  ,largeDateLineTwo: \"MMMM d\"\n}\n\n\/\/ EVENTS\n\/\/ ======\nconst eventSettings = {\n\n  \/\/ How many events to show.\n  numberOfEvents: 6\n\n  \/\/ Show all-day events.\n  ,showAllDay: true\n\n  \/\/ Show tomorrow's events.\n  ,showTomorrow: true\n\n  \/\/ Can be blank \"\" or set to \"duration\" or \"time\" to display how long an event is.\n  ,showEventLength: \"time\"\n\n  \/\/ Set which calendars for which to show events. Empty [] means all calendars.\n  ,selectCalendars: []\n\n  \/\/ Leave blank \"\" for no color, or specify shape (circle, rectangle) and\/or side (left, right).\n  ,showCalendarColor: \"rectangle left\"\n}\n\n\/\/ WEATHER\n\/\/ =======\nconst weatherSettings = {\n\n  \/\/ Set to imperial for Fahrenheit, or metric for Celsius\n  units: \"metric\"\n\n  \/\/ Show today's high and low temperatures.\n  ,showHighLow: true\n\n  \/\/ Set the hour (in 24-hour time) to switch to tomorrow's weather. Set to 24 to never show it.\n  ,tomorrowShownAtHour: 20\n}\n\n\/*\n * TEXT\n * Change the language and formatting of text displayed.\n * =====================================================\n *\/  \n \n\/\/ You can change the language or wording of any text in the widget.\nconst localizedText = {\n  \n  \/\/ The text shown if you add a greeting item to the layout.\n  nightGreeting: \"ÊôöÂÆâüí´\"\n  ,morningGreeting: \"Êó©‰∏äüåù\"\n  ,afternoonGreeting: \"‰∏ãÂçàü§∑üèª‚Äç‚ôÇÔ∏è\"\n  ,eveningGreeting: \"ÂÇçÊôöüåÜ\"\n  \n  \/\/ The text shown if you add a future weather item to the layout, or tomorrow's events.\n  ,nextHourLabel: \"1Â∞èÊó∂Âêé\"\n  ,tomorrowLabel: \"ÊòéÂ§©\"\n\n  \/\/ The text shown in an events item when no events remain.\n  \/\/ Change to blank \"\" if you don't want to show a message.\n  ,noEventMessage: \"U never appreciate what you have.\"\n  \n  \/\/ The text shown after the hours and minutes of an event duration.\n  ,durationMinute: \"m\"\n  ,durationHour: \"h\"\n     \n}\n\n\/\/ Set the font, size, and color of various text elements. Use iosfonts.com to find fonts to use. If you want to use the default iOS font, set the font name to one of the following: ultralight, light, regular, medium, semibold, bold, heavy, black, or italic.\nconst textFormat = {\n  \n  \/\/ Set the default font and color.\n  defaultText: { size: 14, color: \"ffffff\", font: \"regular\" },\n  \n  \/\/ Any blank values will use the default.\n  smallDate:   { size: 17, color: \"\", font: \"semibold\" },\n  largeDate1:  { size: 30, color: \"\", font: \"light\" },\n  largeDate2:  { size: 30, color: \"\", font: \"light\" },\n  \n  greeting:    { size: 30, color: \"\", font: \"semibold\" },\n  eventLabel:  { size: 14, color: \"\", font: \"semibold\" },\n  eventTitle:  { size: 14, color: \"\", font: \"semibold\" },\n  eventTime:   { size: 14, color: \"ffffffcc\", font: \"\" },\n  noEvents:    { size: 14, color: \"\", font: \"semibold\" },\n  \n  largeTemp:   { size: 34, color: \"\", font: \"light\" },\n  smallTemp:   { size: 14, color: \"\", font: \"\" },\n  tinyTemp:    { size: 12, color: \"\", font: \"\" },\n  \n  customText:  { size: 14, color: \"\", font: \"\" },\n}\n\n\/*\n * WIDGET CODE\n * Be more careful editing this section. \n * =====================================\n *\/\n\n\/\/ Make sure we have a locale value.\nif (locale == \"\" || locale == null) { locale = Device.locale() }\n\n\/\/ Declare the data variables.\nvar eventData, locationData, sunData, weatherData\n\n\/\/ Create global constants.\nconst currentDate = new Date()\nconst files = FileManager.local()\n\n\/*\n * COLUMNS\n * =======\n *\/\n\n\/\/ Set up the widget and the main stack.\nlet widget = new ListWidget()\nwidget.setPadding(0, 0, 0, 0)\n\nlet mainStack = widget.addStack()\nmainStack.layoutHorizontally()\nmainStack.setPadding(0, 0, 0, 0)\n\n\/\/ Set up alignment.\nvar currentAlignment = left\n\n\/\/ Set up our columns.\nfor (var x = 0; x < columns.length; x++) {\n\n  let column = columns[x]\n  let columnStack = mainStack.addStack()\n  columnStack.layoutVertically()\n  \n  \/\/ Only add padding on the first or last column.\n  columnStack.setPadding(0, x == 0 ? padding\/2 : 0, 0, x == columns.length-1 ? padding\/2 : 0)\n  columnStack.size = new Size(column.width,0)\n  \n  \/\/ Add the items to the column.\n  for (var i = 0; i < column.items.length; i++) {\n    await column.items[i](columnStack)\n  }\n}\n\n\/*\n * BACKGROUND DISPLAY\n * ==================\n *\/\n\n\/\/ If it's an image background, display it.\nif (imageBackground) {\n  \n  \/\/ Determine if our image exists and when it was saved.\n  const path = files.joinPath(files.documentsDirectory(), \"weather-cal-image\")\n  const exists = files.fileExists(path)\n  \n  \/\/ If it exists and an update isn't forced, use the cache.\n  if (exists && (config.runsInWidget || !forceImageUpdate)) {\n    widget.backgroundImage = files.readImage(path)\n  \n  \/\/ If it's missing when running in the widget, use a gray background.\n  } else if (!exists && config.runsInWidget) {\n      widget.backgroundColor = Color.gray() \n    \n  \/\/ But if we're running in app, prompt the user for the image.\n  } else {\n      const img = await Photos.fromLibrary()\n      widget.backgroundImage = img\n      files.writeImage(path, img)\n  }\n    \n\/\/ If it's not an image background, show the gradient.\n} else {\n  let gradient = new LinearGradient()\n  let gradientSettings = await setupGradient()\n  \n  gradient.colors = gradientSettings.color()\n  gradient.locations = gradientSettings.position()\n  \n  widget.backgroundGradient = gradient\n}\n\n\/\/ Finish the widget and show a preview.\nScript.setWidget(widget)\nif (widgetPreview == \"small\") { widget.presentSmall() }\nelse if (widgetPreview == \"medium\") { widget.presentMedium() }\nelse if (widgetPreview == \"large\") { widget.presentLarge() }\nScript.complete()\n\n\/*\n * LAYOUT FUNCTIONS\n * These functions manage spacing and alignment.\n * =============================================\n *\/\n\n\/\/ Create an aligned stack to add content to.\nfunction align(column) {\n  \n  \/\/ Add the containing stack to the column.\n  let alignmentStack = column.addStack()\n  alignmentStack.layoutHorizontally()\n  \n  \/\/ Get the correct stack from the alignment function.\n  let returnStack = currentAlignment(alignmentStack)\n  returnStack.layoutVertically()\n  return returnStack\n}\n\n\/\/ Create a right-aligned stack.\nfunction alignRight(alignmentStack) {\n  alignmentStack.addSpacer()\n  let returnStack = alignmentStack.addStack()\n  return returnStack\n}\n\n\/\/ Create a left-aligned stack.\nfunction alignLeft(alignmentStack) {\n  let returnStack = alignmentStack.addStack()\n  alignmentStack.addSpacer()\n  return returnStack\n}\n\n\/\/ Create a center-aligned stack.\nfunction alignCenter(alignmentStack) {\n  alignmentStack.addSpacer()\n  let returnStack = alignmentStack.addStack()\n  alignmentStack.addSpacer()\n  return returnStack\n}\n\n\/\/ This function adds a space, with an optional amount.\nfunction space(input = null) { \n  \n  \/\/ This function adds a spacer with the input width.\n  function spacer(column) {\n  \n    \/\/ If the input is null or zero, add a flexible spacer.\n    if (!input || input == 0) { column.addSpacer() }\n    \n    \/\/ Otherwise, add a space with the specified length.\n    else { column.addSpacer(input) }\n  }\n  \n  \/\/ If there's no input or it's a number, it's being called in the column declaration.\n  if (!input || typeof input == \"number\") { return spacer }\n  \n  \/\/ Otherwise, it's being called in the column generator.\n  else { input.addSpacer() }\n}\n\n\/\/ Change the current alignment to right.\nfunction right(x) { currentAlignment = alignRight }\n\n\/\/ Change the current alignment to left.\nfunction left(x) { currentAlignment = alignLeft }\n\n\/\/ Change the current alignment to center.\nfunction center(x) { currentAlignment = alignCenter }\n\n\/*\n * SETUP FUNCTIONS\n * These functions prepare data needed for items.\n * ==============================================\n *\/\n\n\/\/ Set up the eventData object.\nasync function setupEvents() {\n  \n  eventData = {}\n  const calendars = eventSettings.selectCalendars\n  const numberOfEvents = eventSettings.numberOfEvents\n\n  \/\/ Function to determine if an event should be shown.\n  function shouldShowEvent(event) {\n  \n    \/\/ If events are filtered and the calendar isn't in the selected calendars, return false.\n    if (calendars.length && !calendars.includes(event.calendar.title)) { return false }\n\n    \/\/ Hack to remove canceled Office 365 events.\n    if (event.title.startsWith(\"Canceled:\")) { return false }\n\n    \/\/ If it's an all-day event, only show if the setting is active.\n    if (event.isAllDay) { return eventSettings.showAllDay }\n\n    \/\/ Otherwise, return the event if it's in the future.\n    return (event.startDate.getTime() > currentDate.getTime())\n  }\n  \n  \/\/ Determine which events to show, and how many.\n  const todayEvents = await CalendarEvent.today([])\n  let shownEvents = 0\n  let futureEvents = []\n  \n  for (const event of todayEvents) {\n    if (shownEvents == numberOfEvents) { break }\n    if (shouldShowEvent(event)) {\n      futureEvents.push(event)\n      shownEvents++\n    }\n  }\n\n  \/\/ If there's room and we need to, show tomorrow's events.\n  let multipleTomorrowEvents = false\n  if (eventSettings.showTomorrow && shownEvents < numberOfEvents) {\n  \n    const tomorrowEvents = await CalendarEvent.tomorrow([])\n    for (const event of tomorrowEvents) {\n      if (shownEvents == numberOfEvents) { break }\n      if (shouldShowEvent(event)) {\n      \n        \/\/ Add the tomorrow label prior to the first tomorrow event.\n        if (!multipleTomorrowEvents) { \n          \n          \/\/ The tomorrow label is pretending to be an event.\n          futureEvents.push({ title: localizedText.tomorrowLabel.toUpperCase(), isLabel: true })\n          multipleTomorrowEvents = true\n        }\n        \n        \/\/ Show the tomorrow event and increment the counter.\n        futureEvents.push(event)\n        shownEvents++\n      }\n    }\n  }\n  \n  \/\/ Store the future events, and whether or not any events are displayed.\n  eventData.futureEvents = futureEvents\n  eventData.eventsAreVisible = (futureEvents.length > 0) && (eventSettings.numberOfEvents > 0)\n}\n\n\/\/ Set up the gradient for the widget background.\nasync function setupGradient() {\n  \n  \/\/ Requirements: sunrise\n  if (!sunData) { await setupSunrise() }\n\n  let gradient = {\n    dawn: {\n      color() { return [new Color(\"142C52\"), new Color(\"1B416F\"), new Color(\"62668B\")] },\n      position() { return [0, 0.5, 1] },\n    },\n\n    sunrise: {\n      color() { return [new Color(\"274875\"), new Color(\"766f8d\"), new Color(\"f0b35e\")] },\n      position() { return [0, 0.8, 1.5] },\n    },\n\n    midday: {\n      color() { return [new Color(\"3a8cc1\"), new Color(\"90c0df\")] },\n      position() { return [0, 1] },\n    },\n\n    noon: {\n      color() { return [new Color(\"b2d0e1\"), new Color(\"80B5DB\"), new Color(\"3a8cc1\")] },\n      position() { return [-0.2, 0.2, 1.5] },\n    },\n\n    sunset: {\n      color() { return [new Color(\"32327A\"), new Color(\"662E55\"), new Color(\"7C2F43\")] },\n      position() { return [0.1, 0.9, 1.2] },\n    },\n\n    twilight: {\n      color() { return [new Color(\"021033\"), new Color(\"16296b\"), new Color(\"414791\")] },\n      position() { return [0, 0.5, 1] },\n    },\n\n    night: {\n      color() { return [new Color(\"16296b\"), new Color(\"021033\"), new Color(\"021033\"), new Color(\"113245\")] },\n      position() { return [-0.5, 0.2, 0.5, 1] },\n    },\n  }\n\n  const sunrise = sunData.sunrise\n  const sunset = sunData.sunset\n  const utcTime = currentDate.getTime()\n\n  function closeTo(time,mins) {\n    return Math.abs(utcTime - time) < (mins * 60000)\n  }\n\n  \/\/ Use sunrise or sunset if we're within 30min of it.\n  if (closeTo(sunrise,15)) { return gradient.sunrise }\n  if (closeTo(sunset,15)) { return gradient.sunset }\n\n  \/\/ In the 30min before\/after, use dawn\/twilight.\n  if (closeTo(sunrise,45) && utcTime < sunrise) { return gradient.dawn }\n  if (closeTo(sunset,45) && utcTime > sunset) { return gradient.twilight }\n\n  \/\/ Otherwise, if it's night, return night.\n  if (isNight(currentDate)) { return gradient.night }\n\n  \/\/ If it's around noon, the sun is high in the sky.\n  if (currentDate.getHours() == 12) { return gradient.noon }\n\n  \/\/ Otherwise, return the \"typical\" theme.\n  return gradient.midday\n}\n\n\/\/ Set up the locationData object.\nasync function setupLocation() {\n\n  locationData = {}\n  const locationPath = files.joinPath(files.documentsDirectory(), \"weather-cal-location\")\n\n  \/\/ If our location is unlocked or cache doesn't exist, ask iOS for location.\n  var readLocationFromFile = false\n  if (!lockLocation || !files.fileExists(locationPath)) {\n    try {\n      const location = await Location.current()\n      locationData.latitude = location.latitude\n      locationData.longitude = location.longitude\n      files.writeString(locationPath, location.latitude + \",\" + location.longitude)\n    \n    } catch(e) {\n      \/\/ If we fail in unlocked mode, read it from the cache.\n      if (!lockLocation) { readLocationFromFile = true }\n      \n      \/\/ We can't recover if we fail on first run in locked mode.\n      else { return }\n    }\n  }\n  \n  \/\/ If our location is locked or we need to read from file, do it.\n  if (lockLocation || readLocationFromFile) {\n    const locationStr = files.readString(locationPath).split(\",\")\n    locationData.latitude = locationStr[0]\n    locationData.longitude = locationStr[1]\n  }\n}\n\n\/\/ Set up the sunData object.\nasync function setupSunrise() {\n\n  \/\/ Requirements: location\n  if (!locationData) { await setupLocation() }\n\n  \/\/ Set up the sunrise\/sunset cache.\n  const sunCachePath = files.joinPath(files.documentsDirectory(), \"weather-cal-sun\")\n  const sunCacheExists = files.fileExists(sunCachePath)\n  const sunCacheDate = sunCacheExists ? files.modificationDate(sunCachePath) : 0\n  var sunDataRaw\n\n  \/\/ If cache exists and it was created today, use cached data.\n  if (sunCacheExists && sameDay(currentDate, sunCacheDate)) {\n    const sunCache = files.readString(sunCachePath)\n    sunDataRaw = JSON.parse(sunCache)\n\n  \/\/ Otherwise, use the API to get sunrise and sunset times.\n  } else {\n    const sunReq = \"https:\/\/api.sunrise-sunset.org\/json?lat=\" + locationData.latitude + \"&lng=\" + locationData.longitude + \"&formatted=0&date=\" + currentDate.getFullYear() + \"-\" + (currentDate.getMonth()+1) + \"-\" + currentDate.getDate()\n    sunDataRaw = await new Request(sunReq).loadJSON()\n    files.writeString(sunCachePath, JSON.stringify(sunDataRaw))\n  }\n\n  \/\/ Store the timing values.\n  sunData = {}\n  sunData.sunrise = new Date(sunDataRaw.results.sunrise).getTime()\n  sunData.sunset = new Date(sunDataRaw.results.sunset).getTime()\n}\n\n\/\/ Set up the weatherData object.\nasync function setupWeather() {\n\n  \/\/ Requirements: location\n  if (!locationData) { await setupLocation() }\n\n  \/\/ Set up the cache.\n  const cachePath = files.joinPath(files.documentsDirectory(), \"weather-cal-cache\")\n  const cacheExists = files.fileExists(cachePath)\n  const cacheDate = cacheExists ? files.modificationDate(cachePath) : 0\n  var weatherDataRaw\n\n  \/\/ If cache exists and it's been less than 60 seconds since last request, use cached data.\n  if (cacheExists && (currentDate.getTime() - cacheDate.getTime()) < 60000) {\n    const cache = files.readString(cachePath)\n    weatherDataRaw = JSON.parse(cache)\n\n  \/\/ Otherwise, use the API to get new weather data.\n  } else {\n    const weatherReq = \"https:\/\/api.openweathermap.org\/data\/2.5\/onecall?lat=\" + locationData.latitude + \"&lon=\" + locationData.longitude + \"&exclude=minutely,alerts&units=\" + weatherSettings.units + \"&lang=\" + locale + \"&appid=\" + apiKey\n    weatherDataRaw = await new Request(weatherReq).loadJSON()\n    files.writeString(cachePath, JSON.stringify(weatherDataRaw))\n  }\n\n  \/\/ Store the weather values.\n  weatherData = {}\n  weatherData.currentTemp = weatherDataRaw.current.temp\n  weatherData.currentCondition = weatherDataRaw.current.weather[0].id\n  weatherData.todayHigh = weatherDataRaw.daily[0].temp.max\n  weatherData.todayLow = weatherDataRaw.daily[0].temp.min\n\n  weatherData.nextHourTemp = weatherDataRaw.hourly[1].temp\n  weatherData.nextHourCondition = weatherDataRaw.hourly[1].weather[0].id\n\n  weatherData.tomorrowHigh = weatherDataRaw.daily[1].temp.max\n  weatherData.tomorrowLow = weatherDataRaw.daily[1].temp.min\n  weatherData.tomorrowCondition = weatherDataRaw.daily[1].weather[0].id\n}\n\n\/*\n * WIDGET ITEMS\n * These functions display items on the widget.\n * ============================================\n *\/\n\n\/\/ Display the date on the widget.\nasync function date(column) {\n\n  \/\/ Requirements: events (if dynamicDateSize is enabled)\n  if (!eventData && dateSettings.dynamicDateSize) { await setupEvents() }\n\n  \/\/ Set up the date formatter and set its locale.\n  let df = new DateFormatter()\n  df.locale = locale\n  \n  \/\/ Show small if it's hard coded, or if it's dynamic and events are visible.\n  if (dateSettings.staticDateSize == \"small\" || (dateSettings.dynamicDateSize && eventData.eventsAreVisible)) {\n    let dateStack = align(column)\n    dateStack.setPadding(padding, padding, padding, padding)\n\n    df.dateFormat = dateSettings.smallDateFormat\n    let dateText = provideText(df.string(currentDate), dateStack, textFormat.smallDate)\n    \n  \/\/ Otherwise, show the large date.\n  } else {\n    let dateOneStack = align(column)\n    df.dateFormat = dateSettings.largeDateLineOne\n    let dateOne = provideText(df.string(currentDate), dateOneStack, textFormat.largeDate1)\n    dateOneStack.setPadding(padding, padding, 0, padding)\n    \n    let dateTwoStack = align(column)\n    df.dateFormat = dateSettings.largeDateLineTwo\n    let dateTwo = provideText(df.string(currentDate), dateTwoStack, textFormat.largeDate2)\n    dateTwoStack.setPadding(0, padding, padding, 10)\n  }\n}\n\n\/\/ Display a time-based greeting on the widget.\nasync function greeting(column) {\n\n  \/\/ This function makes a greeting based on the time of day.\n  function makeGreeting() {\n    const hour = currentDate.getHours()\n    if (hour    < 5)  { return localizedText.nightGreeting }\n    if (hour    < 12) { return localizedText.morningGreeting }\n    if (hour-12 < 5)  { return localizedText.afternoonGreeting }\n    if (hour-12 < 10) { return localizedText.eveningGreeting }\n    return localizedText.nightGreeting\n  }\n  \n  \/\/ Set up the greeting.\n  let greetingStack = align(column)\n  let greeting = provideText(makeGreeting(), greetingStack, textFormat.greeting)\n  greetingStack.setPadding(padding, padding, padding, padding)\n}\n\n\/\/ Display events on the widget.\nasync function events(column) {\n\n  \/\/ Requirements: events\n  if (!eventData) { await setupEvents() }\n\n  \/\/ If nothing should be displayed, just return.\n  if (!eventData.eventsAreVisible && !localizedText.noEventMessage.length) { return }\n  \n  \/\/ Set up the event stack.\n  let eventStack = column.addStack()\n  eventStack.layoutVertically()\n  const todaySeconds = Math.floor(currentDate.getTime() \/ 1000) - 978307200\n  eventStack.url = 'calshow:' + todaySeconds\n  \n  \/\/ If there are no events and we have a message, show it and return.\n  if (!eventData.eventsAreVisible && localizedText.noEventMessage.length) {\n    let message = provideText(localizedText.noEventMessage, eventStack, textFormat.noEvents)\n    eventStack.setPadding(padding, padding, padding, padding)\n    return\n  }\n  \n  \/\/ If we're not showing the message, don't pad the event stack.\n  eventStack.setPadding(0, 0, 0, 0)\n  \n  \/\/ Add each event to the stack.\n  var currentStack = eventStack\n  const futureEvents = eventData.futureEvents\n  for (let i = 0; i < futureEvents.length; i++) {\n    \n    const event = futureEvents[i]\n    const bottomPadding = (padding-10 < 0) ? 0 : padding-10\n    \n    \/\/ If it's the tomorrow label, change to the tomorrow stack.\n    if (event.isLabel) {\n      let tomorrowStack = column.addStack()\n      tomorrowStack.layoutVertically()\n      const tomorrowSeconds = Math.floor(currentDate.getTime() \/ 1000) - 978220800\n      tomorrowStack.url = 'calshow:' + tomorrowSeconds\n      currentStack = tomorrowStack\n      \n      \/\/ Mimic the formatting of an event title, mostly.\n      const eventLabelStack = align(currentStack)\n      const eventLabel = provideText(event.title, eventLabelStack, textFormat.eventLabel)\n      eventLabelStack.setPadding(i==0 ? padding : padding\/2, padding, padding\/2, padding)\n      continue\n    }\n    \n    const titleStack = align(currentStack)\n    titleStack.layoutHorizontally()\n    const showCalendarColor = eventSettings.showCalendarColor\n    const colorShape = showCalendarColor.includes(\"circle\") ? \"circle\" : \"rectangle\"\n    \n    \/\/ If we're showing a color, and it's not shown on the right, add it to the left.\n    if (showCalendarColor.length && !showCalendarColor.includes(\"right\")) {\n      let colorItemText = provideTextSymbol(colorShape) + \" \"\n      let colorItem = provideText(colorItemText, titleStack, textFormat.eventTitle)\n      colorItem.textColor = event.calendar.color\n    }\n\n    const title = provideText(event.title.trim(), titleStack, textFormat.eventTitle)\n    titleStack.setPadding(i==0 ? padding : padding\/2, padding, event.isAllDay ? padding\/2 : padding\/10, padding)\n    \n    \/\/ If we're showing a color on the right, show it.\n    if (showCalendarColor.length && showCalendarColor.includes(\"right\")) {\n      let colorItemText = \" \" + provideTextSymbol(colorShape)\n      let colorItem = provideText(colorItemText, titleStack, textFormat.eventTitle)\n      colorItem.textColor = event.calendar.color\n    }\n  \n    \/\/ If there are too many events, limit the line height.\n    if (futureEvents.length >= 3) { title.lineLimit = 1 }\n\n    \/\/ If it's an all-day event, we don't need a time.\n    if (event.isAllDay) { continue }\n    \n    \/\/ Format the time information.\n    let df = new DateFormatter()\n    df.locale = locale\n    df.useNoDateStyle()\n    df.useShortTimeStyle()\n    let timeText = df.string(event.startDate)\n    \n    \/\/ If we show the length as time, add an en dash and the time.\n    if (eventSettings.showEventLength == \"time\") { \n      timeText += \"‚Äì\" + df.string(event.endDate) \n      \n    \/\/ If we should it as a duration, add the minutes.\n    } else if (eventSettings.showEventLength == \"duration\") {\n      const duration = (event.endDate.getTime() - event.startDate.getTime()) \/ (1000*60)\n      const hours = Math.floor(duration\/60)\n      const minutes = Math.floor(duration % 60)\n      const hourText = hours>0 ? hours + localizedText.durationHour : \"\"\n      const minuteText = minutes>0 ? minutes + localizedText.durationMinute : \"\"\n      const showSpace = hourText.length && minuteText.length\n      timeText += \" \\u2022 \" + hourText + (showSpace ? \" \" : \"\") + minuteText\n    }\n\n    const timeStack = align(currentStack)\n    const time = provideText(timeText, timeStack, textFormat.eventTime)\n    timeStack.setPadding(0, padding, i==futureEvents.length-1 ? padding : padding\/2, padding)\n  }\n}\n\n\/\/ Display the current weather.\nasync function current(column) {\n\n  \/\/ Requirements: weather and sunrise\n  if (!weatherData) { await setupWeather() }\n  if (!sunData) { await setupSunrise() }\n\n  \/\/ Set up the current weather stack.\n  let currentWeatherStack = column.addStack()\n  currentWeatherStack.layoutVertically()\n  currentWeatherStack.setPadding(0, 0, 0, 0)\n  currentWeatherStack.url = \"https:\/\/weather.com\/weather\/today\/l\/\" + locationData.latitude + \",\" + locationData.longitude\n\n  \/\/ Show the current condition symbol.\n  let mainConditionStack = align(currentWeatherStack)\n  let mainCondition = mainConditionStack.addImage(provideSymbol(weatherData.currentCondition,isNight(currentDate)))\n  mainCondition.imageSize = new Size(22,22)\n  mainConditionStack.setPadding(padding, padding, 0, padding)\n\n  \/\/ Show the current temperature.\n  const tempStack = align(currentWeatherStack)\n  tempStack.setPadding(0, padding, 0, padding)\n  const tempText = Math.round(weatherData.currentTemp) + \"¬∞\"\n  const temp = provideText(tempText, tempStack, textFormat.largeTemp)\n  \n  \/\/ If we're not showing the high and low, end it here.\n  if (!weatherSettings.showHighLow) { return }\n\n  \/\/ Show the temp bar and high\/low values.\n  let tempBarStack = align(currentWeatherStack)\n  tempBarStack.layoutVertically()\n  tempBarStack.setPadding(0, padding, padding\/2, padding)\n  \n  let tempBar = drawTempBar()\n  let tempBarImage = tempBarStack.addImage(tempBar)\n  tempBarImage.size = new Size(50,0)\n  \n  tempBarStack.addSpacer(1)\n  \n  let highLowStack = tempBarStack.addStack()\n  highLowStack.layoutHorizontally()\n  \n  const mainLowText = Math.round(weatherData.todayLow).toString()\n  const mainLow = provideText(mainLowText, highLowStack, textFormat.tinyTemp)\n  highLowStack.addSpacer()\n  const mainHighText = Math.round(weatherData.todayHigh).toString()\n  const mainHigh = provideText(mainHighText, highLowStack, textFormat.tinyTemp)\n  \n  tempBarStack.size = new Size(70,30)\n}\n\n\/\/ Display upcoming weather.\nasync function future(column) {\n\n  \/\/ Requirements: weather and sunrise\n  if (!weatherData) { await setupWeather() }\n  if (!sunData) { await setupSunrise() }\n\n  \/\/ Set up the future weather stack.\n  let futureWeatherStack = column.addStack()\n  futureWeatherStack.layoutVertically()\n  futureWeatherStack.setPadding(0, 0, 0, 0)\n  futureWeatherStack.url = \"https:\/\/weather.com\/weather\/tenday\/l\/\" + locationData.latitude + \",\" + locationData.longitude\n\n  \/\/ Determine if we should show the next hour.\n  const showNextHour = (currentDate.getHours() < weatherSettings.tomorrowShownAtHour)\n  \n  \/\/ Set the label value.\n  const subLabelStack = align(futureWeatherStack)\n  const subLabelText = showNextHour ? localizedText.nextHourLabel : localizedText.tomorrowLabel\n  const subLabel = provideText(subLabelText, subLabelStack, textFormat.smallTemp)\n  subLabelStack.setPadding(0, padding, padding\/4, padding)\n  \n  \/\/ Set up the sub condition stack.\n  let subConditionStack = align(futureWeatherStack)\n  subConditionStack.layoutHorizontally()\n  subConditionStack.centerAlignContent()\n  subConditionStack.setPadding(0, padding, padding, padding)\n  \n  \/\/ Determine if it will be night in the next hour.\n  var nightCondition\n  if (showNextHour) {\n    const addHour = currentDate.getTime() + (60*60*1000)\n    const newDate = new Date(addHour)\n    nightCondition = isNight(newDate)\n  } else {\n    nightCondition = false \n  }\n  \n  let subCondition = subConditionStack.addImage(provideSymbol(showNextHour ? weatherData.nextHourCondition : weatherData.tomorrowCondition,nightCondition))\n  const subConditionSize = showNextHour ? 14 : 18\n  subCondition.imageSize = new Size(subConditionSize, subConditionSize)\n  subConditionStack.addSpacer(5)\n  \n  \/\/ The next part of the display changes significantly for next hour vs tomorrow.\n  if (showNextHour) {\n    const subTempText = Math.round(weatherData.nextHourTemp) + \"¬∞\"\n    const subTemp = provideText(subTempText, subConditionStack, textFormat.smallTemp)\n    \n  } else {\n    let tomorrowLine = subConditionStack.addImage(drawVerticalLine(new Color(\"ffffff\", 0.5), 20))\n    tomorrowLine.imageSize = new Size(3,28)\n    subConditionStack.addSpacer(5)\n    let tomorrowStack = subConditionStack.addStack()\n    tomorrowStack.layoutVertically()\n    \n    const tomorrowHighText = Math.round(weatherData.tomorrowHigh) + \"\"\n    const tomorrowHigh = provideText(tomorrowHighText, tomorrowStack, textFormat.tinyTemp)\n    tomorrowStack.addSpacer(4)\n    const tomorrowLowText = Math.round(weatherData.tomorrowLow) + \"\"\n    const tomorrowLow = provideText(tomorrowLowText, tomorrowStack, textFormat.tinyTemp)\n  }\n}\n\n\/\/ Return a text-creation function.\nfunction text(input = null) {\n\n  function displayText(column) {\n  \n    \/\/ Don't do anything if the input is blank.\n    if (!input || input == \"\") { return }\n  \n    \/\/ Otherwise, add the text.\n    const textStack = align(column)\n    textStack.setPadding(padding, padding, padding, padding)\n    const textDisplay = provideText(input, textStack, textFormat.customText)\n  }\n  return displayText\n}\n\n\/*\n * HELPER FUNCTIONS\n * These functions perform duties for other functions.\n * ===================================================\n *\/\n\n\/\/ Determines if the provided date is at night.\nfunction isNight(dateInput) {\n  const timeValue = dateInput.getTime()\n  return (timeValue < sunData.sunrise) || (timeValue > sunData.sunset)\n}\n\n\/\/ Determines if two dates occur on the same day\nfunction sameDay(d1, d2) {\n  return d1.getFullYear() === d2.getFullYear() &&\n    d1.getMonth() === d2.getMonth() &&\n    d1.getDate() === d2.getDate()\n}\n\n\/\/ Provide a text symbol with the specified shape.\nfunction provideTextSymbol(shape) {\n\n  \/\/ Rectangle character.\n  if (shape.startsWith(\"rect\")) {\n    return \"\\u2759\"\n  }\n  \/\/ Circle character.\n  if (shape == \"circle\") {\n    return \"\\u2B24\"\n  }\n  \/\/ Default to the rectangle.\n  return \"\\u2759\" \n}\n\n\/\/ Provide a symbol based on the condition.\nfunction provideSymbol(cond,night) {\n  \n  \/\/ Define our symbol equivalencies.\n  let symbols = {\n  \n    \/\/ Thunderstorm\n    \"2\": function() { return \"cloud.bolt.rain.fill\" },\n    \n    \/\/ Drizzle\n    \"3\": function() { return \"cloud.drizzle.fill\" },\n    \n    \/\/ Rain\n    \"5\": function() { return (cond == 511) ? \"cloud.sleet.fill\" : \"cloud.rain.fill\" },\n    \n    \/\/ Snow\n    \"6\": function() { return (cond >= 611 && cond <= 613) ? \"cloud.snow.fill\" : \"snow\" },\n    \n    \/\/ Atmosphere\n    \"7\": function() {\n      if (cond == 781) { return \"tornado\" }\n      if (cond == 701 || cond == 741) { return \"cloud.fog.fill\" }\n      return night ? \"cloud.fog.fill\" : \"sun.haze.fill\"\n    },\n    \n    \/\/ Clear and clouds\n    \"8\": function() {\n      if (cond == 800 || cond == 801) { return night ? \"moon.stars.fill\" : \"sun.max.fill\" }\n      if (cond == 802 || cond == 803) { return night ? \"cloud.moon.fill\" : \"cloud.sun.fill\" }\n      return \"cloud.fill\"\n    }\n  }\n  \n  \/\/ Find out the first digit.\n  let conditionDigit = Math.floor(cond \/ 100)\n  \n  \/\/ Get the symbol.\n  return SFSymbol.named(symbols[conditionDigit]()).image\n}\n\n\/\/ Provide a font based on the input.\nfunction provideFont(fontName, fontSize) {\n  const fontGenerator = {\n    \"ultralight\": function() { return Font.ultraLightSystemFont(fontSize) },\n    \"light\": function() { return Font.lightSystemFont(fontSize) },\n    \"regular\": function() { return Font.regularSystemFont(fontSize) },\n    \"medium\": function() { return Font.mediumSystemFont(fontSize) },\n    \"semibold\": function() { return Font.semiboldSystemFont(fontSize) },\n    \"bold\": function() { return Font.boldSystemFont(fontSize) },\n    \"heavy\": function() { return Font.heavySystemFont(fontSize) },\n    \"black\": function() { return Font.blackSystemFont(fontSize) },\n    \"italic\": function() { return Font.italicSystemFont(fontSize) }\n  }\n  \n  const systemFont = fontGenerator[fontName]\n  if (systemFont) { return systemFont() }\n  return new Font(fontName, fontSize)\n}\n \n\/\/ Add formatted text to a container.\nfunction provideText(string, container, format) {\n  const textItem = container.addText(string)\n  const textFont = format.font || textFormat.defaultText.font\n  const textSize = format.size || textFormat.defaultText.size\n  const textColor = format.color || textFormat.defaultText.color\n  \n  textItem.font = provideFont(textFont, textSize)\n  textItem.textColor = new Color(textColor)\n  return textItem\n}\n\n\/*\n * DRAWING FUNCTIONS\n * These functions draw onto a canvas.\n * ===================================\n *\/\n\n\/\/ Draw the vertical line in the tomorrow view.\nfunction drawVerticalLine(color, height) {\n  \n  const width = 2\n  \n  let draw = new DrawContext()\n  draw.opaque = false\n  draw.respectScreenScale = true\n  draw.size = new Size(width,height)\n  \n  let barPath = new Path()\n  const barHeight = height\n  barPath.addRoundedRect(new Rect(0, 0, height, height), width\/2, width\/2)\n  draw.addPath(barPath)\n  draw.setFillColor(color)\n  draw.fillPath()\n  \n  return draw.getImage()\n}\n\n\/\/ Draw the temp bar.\nfunction drawTempBar() {\n\n  \/\/ Set the size of the temp bar.\n  const tempBarWidth = 200\n  const tempBarHeight = 20\n  \n  \/\/ Calculate the current percentage of the high-low range.\n  let percent = (weatherData.currentTemp - weatherData.todayLow) \/ (weatherData.todayHigh - weatherData.todayLow)\n\n  \/\/ If we're out of bounds, clip it.\n  if (percent < 0) {\n    percent = 0\n  } else if (percent > 1) {\n    percent = 1\n  }\n\n  \/\/ Determine the scaled x-value for the current temp.\n  const currPosition = (tempBarWidth - tempBarHeight) * percent\n\n  \/\/ Start our draw context.\n  let draw = new DrawContext()\n  draw.opaque = false\n  draw.respectScreenScale = true\n  draw.size = new Size(tempBarWidth, tempBarHeight)\n\n  \/\/ Make the path for the bar.\n  let barPath = new Path()\n  const barHeight = tempBarHeight - 10\n  barPath.addRoundedRect(new Rect(0, 5, tempBarWidth, barHeight), barHeight \/ 2, barHeight \/ 2)\n  draw.addPath(barPath)\n  draw.setFillColor(new Color(\"ffffff\", 0.5))\n  draw.fillPath()\n\n  \/\/ Make the path for the current temp indicator.\n  let currPath = new Path()\n  currPath.addEllipse(new Rect(currPosition, 0, tempBarHeight, tempBarHeight))\n  draw.addPath(currPath)\n  draw.setFillColor(new Color(\"ffffff\", 1))\n  draw.fillPath()\n\n  return draw.getImage()\n}\n",
  "share_sheet_inputs" : [

  ]
}